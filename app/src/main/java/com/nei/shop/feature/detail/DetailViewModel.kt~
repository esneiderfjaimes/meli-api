package com.nei.shop.feature.detail

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.nei.shop.domain.Product
import com.nei.shop.network.SearchService
import com.nei.shop.network.toDomain
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

class DetailViewModel : ViewModel() {
    private val _state: MutableStateFlow<DetailState> = MutableStateFlow(DetailState.Init)
    val state: StateFlow<DetailState> get() = _state
    private val _history: MutableStateFlow<Set<String>> = MutableStateFlow(setOf())
    val history: StateFlow<Set<String>> get() = _history

    val okHttpClient: OkHttpClient = HttpLoggingInterceptor().run {
        level = HttpLoggingInterceptor.Level.BODY
        OkHttpClient.Builder().addInterceptor(this).build()
    }
    val build = Retrofit.Builder()
        .baseUrl("https://api.mercadolibre.com/sites/MCO/")
        .client(okHttpClient)
        .addConverterFactory(GsonConverterFactory.create())
        .build()

    fun search(query: String) {
        viewModelScope.launch {
            withContext(Dispatchers.IO) {
                if (query.isBlank()) {
                    _state.value = DetailState.Init
                    return@withContext
                }

                _state.value = DetailState.Loading

                val pageCharacters =
                    kotlin.runCatching {
                        build.create(SearchService::class.java).getPageCharacters(query)
                    }
                pageCharacters.fold(
                    onSuccess = {
                        val products = it.results.toDomain()
                        Log.d("MainViewModel", "search: products:$products")
                        _state.value = DetailState.Success(products)
                    },
                    onFailure = {
                        _state.value = DetailState.Error(it.message.orEmpty())
                    }
                )
            }
        }
    }

    fun addHistory(query: String) {
        _history.value = _history.value.plus(query)
    }

    sealed class DetailState {
        data object Init : DetailState()
        data object Loading : DetailState()
        data class Error(val message: String) : DetailState()
        data class Success(val products: List<Product>) : DetailState()
    }
}